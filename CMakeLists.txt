cmake_minimum_required(VERSION 2.8)
project(ArxFatalis)

# For custom cmake modules.
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

include(CheckTypeSize)
include(CheckSymbolExists)
include(CheckCXXSourceCompiles)

include(UnityBuild)
include(CompileCheck)

function(create_source_groups)
	# Source groups
	set(SOURCE_GROUPS ai animation audio core game graphics gui input io physics platform scene script)
	foreach(SOURCE_GROUP ${SOURCE_GROUPS})
		file(GLOB_RECURSE SOURCES ${SRC_DIR}/${SOURCE_GROUP}/*.*)
		source_group("${SOURCE_GROUP}" FILES ${SOURCES})
	endforeach(SOURCE_GROUP)
endfunction()

##############################################################################

option(ARX_BUILD_TESTS "Build tests" OFF)
option(ARX_BUILD_TOOLS "Build tools" ON)
option(ARX_BUILD_EDITOR "Build editor" ON)
option(ARX_BUILD_EDIT_LOADSAVE "Build save/load functions only used by the editor" ON)
option(ARX_USE_UNITYBUILD "Unity build" OFF)
option(ARX_DEBUG "Normal debug options" ON)
option(ARX_DEBUG_EXTRA "Expensive debug options" OFF)
option(ARX_FORCE_32BIT "Force a 32-bit build on 64-bit systems" OFF)
option(ARX_USE_OPENAL "Build the OpenAL audio backend." ON)
option(ARX_USE_DSOUND "Build the DirectSound audio backend." ON)
option(ARX_USE_OPENGL "Build the OpenGL renderer backend." OFF)

if(ARX_FORCE_32BIT)
	set(CURRENT_ARX_FORCE_32BIT 1)
else()
	set(CURRENT_ARX_FORCE_32BIT 0)
endif()
if(NOT LAST_ARX_FORCE_32BIT EQUAL CURRENT_ARX_FORCE_32BIT)
	unset(CHECK_COMPILER CACHE)
	force_recheck_library(DevIL IL)
	force_recheck_library(ZLIB)
	force_recheck_library(Freetype)
	force_recheck_library(Threads)
	force_recheck_library(OpenAL)
	force_recheck_library(OpenGL)
	force_recheck_library(Boost)
	unset(Boost_INCLUDE_DIR CACHE)
	set(LAST_ARX_FORCE_32BIT "${CURRENT_ARX_FORCE_32BIT}" CACHE INTERNAL "The last ARX_FORCE_32BIT value")
endif()

find_package(Freetype REQUIRED)
find_package(DevIL REQUIRED)
find_package(ZLIB REQUIRED)
find_package(Threads REQUIRED)
if(ARX_USE_OPENGL)
	find_package(OpenGL REQUIRED)
endif()
if(ARX_USE_OPENAL)
	find_package(OpenAL 1.1 REQUIRED)
	find_package(OpenALEFX)
endif()
find_package(Doxygen)
find_package(PythonInterp)

if(MSVC)
	# Link statically with Boost under Windows
	set(Boost_USE_STATIC_LIBS ON)
endif(MSVC)
find_package(Boost 1.37 REQUIRED COMPONENTS filesystem system)

mark_as_advanced(IL_INCLUDE_DIR)
mark_as_advanced(ILUT_LIBRARIES)
mark_as_advanced(ILU_LIBRARIES)
mark_as_advanced(IL_LIBRARIES)

set(SRC_DIR src)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)
if(MSVC)
	# Set optimal options for msvc:

	# Remove targets we don't really use (RelWithDebInfo, MinSizeRel)
	set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Using only Debug and Release" FORCE)
	
	# Disable deprecation warnings
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
	add_definitions(-D_SCL_SECURE_NO_WARNINGS)
	add_definitions(-DBOOST_NO_EXCEPTIONS)
	add_definitions(/wd4995)
	
	# TEMP - disable warning caused by the F2L removal
	add_definitions(/wd4244)    # conversion from 'float' to 'long', possible loss of data

	# This is needed to use ZLIB as a DLL
	add_definitions(-DZLIB_WINAPI)

	if(NOT ARX_DEBUG_EXTRA)
		add_definitions(-D_HAS_ITERATOR_DEBUGGING=0)
		add_definitions(-D_SECURE_SCL=0)
		add_definitions(-D_SECURE_SCL_THROWS=0)
		add_definitions(-D_ITERATOR_DEBUG_LEVEL=0)
	endif()
	
	# Add dx7 include & lib paths
	if("$ENV{DX7SDK_PATH}" STREQUAL "")
		message(WARNING "DX7SDK_PATH environment variable not found")
	else("$ENV{DX7SDK_PATH}" STREQUAL "")
		message(STATUS "Using DirectX 7 SDK found in " $ENV{DX7SDK_PATH})
		include_directories("$ENV{DX7SDK_PATH}/include")
		link_directories("$ENV{DX7SDK_PATH}/lib")
	endif("$ENV{DX7SDK_PATH}" STREQUAL "")

	# Add boost lib path
	link_directories(${Boost_LIBRARY_DIRS})
	
	set(HAVE_WINAPI 1)
	
	# Disable exceptions & rtti
	string(REGEX REPLACE "/EHsc" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	add_definitions(/wd4530)
	add_definitions(/GR-)
	
else(MSVC)
	# Set optimal options for gcc:
	
	# If the user hasn't configured a different compiler, set up wine.
	if(NOT CMAKE_TOOLCHAIN_FILE)
		
		find_package(Wine REQUIRED)
		
		# wine compiler
		set(CMAKE_CXX_COMPILER ${Wine_GXX})
		set(CMAKE_C_COMPILER ${Wine_GCC})
		
		# Remove the _WIN32 define generated by winegcc so that there are no problems when using native libraries with cross-platform headers
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -U_WIN32 -U__CYGWIN__ -U__WIN32__ -UWIN32")
		
	endif()
	
	if(ARX_FORCE_32BIT)
		set(CMAKE_C_FLAGS "-m32 ${CMAKE_C_FLAGS}")
		set(CMAKE_CXX_FLAGS "-m32 ${CMAKE_CXX_FLAGS}")
	endif()
	
	set(HAVE_WINAPI 1)
	
	# since we change the compiler after it was checked by CMake, manually check if it works
	check_compiler()
	
	# Check the dependencies so there won't by cryptic link errors later on when found libraries have the wrong architecture (32- vs. 64-bit)
	if(CMAKE_THREAD_LIBS_INIT)
		check_link_library(Threads CMAKE_THREAD_LIBS_INIT)
	endif()
	check_link_library(DevIL IL_LIBRARIES IL)
	check_link_library(ZLIB ZLIB_LIBRARIES)
	check_link_library(Freetype FREETYPE_LIBRARIES)
	if(ARX_USE_OPENAL)
		check_link_library(OpenAL OPENAL_LIBRARY)
	endif()
	if(ARX_USE_OPENGL)
		check_link_library(OpenGL OPENGL_LIBRARIES)
	endif()
	check_link_library(Boost Boost_LIBRARIES)
	
	set(CMAKE_REQUIRED_DEFINITIONS "-D_POSIX_C_SOURCE=199309")
	set(CMAKE_REQUIRED_LIBRARIES "-lrt")
	check_symbol_exists(nanosleep "time.h" HAVE_NANOSLEEP)
	check_symbol_exists(clock_gettime "time.h" HAVE_CLOCK_GETTIME)
	unset(CMAKE_REQUIRED_DEFINITIONS)
	unset(CMAKE_REQUIRED_LIBRARIES)
	if(HAVE_NANOSLEEP OR HAVE_CLOCK_GETTIME)
		set(TIME_LIBRARIES "-lrt")
		add_definitions(-D_POSIX_C_SOURCE=199309)
	endif()
	
	# Warning level
	add_cxxflag("-Wall")
	add_cxxflag("-Wextra")
	add_cxxflag("-Wformat=2")
	add_cxxflag("-Wundef")
	add_cxxflag("-Wpointer-arith")
	add_cxxflag("-Wcast-qual")
	add_cxxflag("-Woverloaded-virtual")
	add_cxxflag("-Wlogical-op")
	
	add_cxxflag("-Wliteral-conversion")
	add_cxxflag("-Wshift-overflow")
	add_cxxflag("-Woverflow")
	add_cxxflag("-Wbool-conversions")
	
	# TODO enable: 
	# add_cxxflag("-Wconversion") # very noisy
	# add_cxxflag("-Wsign-conversion") # very noisy
	# add_cxxflag("-Wmissing-declarations") # to catch functions that should be marked as static
	# add_cxxflag("-Wredundant-decls") # to catch extern definitions in .cpp files (with UNITYBUILD)
	
	if(ARX_DEBUG)
		#Debug
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g3")
		add_definitions(-D_DEBUG)
	else()
		#Release
		add_cxxflag("-fno-strict-aliasing")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -g3") # TODO fix strict aliasing
		add_definitions(-D_NDEBUG)
	endif()
	
	if(ARX_DEBUG_EXTRA)
		add_definitions(-D_GLIBCXX_DEBUG) # Runtime checks for STL containers.
		# add_cxxflag("-Wsuggest-attribute=const")
		# add_cxxflag("-Wsuggest-attribute=pure")
		add_cxxflag("-ftrapv") # to add checks for (undefined) signed integer overflow
		add_cxxflag("-fcatch-undefined-behavior") # (clang)
		add_cxxflag("-fbounds-checking")
	else()
		# -Wuninitialized causes too many false positives
		add_cxxflag("-Wno-uninitialized")
	endif()
	
	if(ARX_USE_UNITYBUILD)
		add_cxxflag("-fwhole-program")
	endif()
	
	# Disable exceptions & rtti
	# add_cxxflag(-fno-exceptions) - boost headers fail to compile if exceptions are disabled
	add_cxxflag(-fno-rtti)
	
endif(MSVC)

check_type_size(char CHAR_SIZE)
if(NOT CHAR_SIZE EQUAL 1)
	message(SEND_ERROR "Unexpected char size: ${CHAR_SIZE}")
endif()

check_cxx_source_compiles("#include <stdlib.h>\n int main() { size_t s = rand(); char test[s]; }" HAVE_DYNAMIC_STACK_ALLOCATION)

# Check that all required functionality is available.
if(CMAKE_USE_PTHREADS_INIT)
	set(HAVE_PTHREADS 1)
elseif(NOT CMAKE_USE_WIN32_THREADS_INIT)
	message(SEND_ERROR "No supported thread libraries found.")
endif()
if(NOT ARX_USE_OPENAL AND NOT ARX_USE_DSOUND)
	message(WARNING "No audio backend enabled.")
endif()
if((NOT HAVE_NANOSLEEP OR NOT HAVE_CLOCK_GETTIME) AND NOT WIN32)
	message(SEND_ERROR "Need either nanosleep and clock_gettime or WIN32.")
endif()

# Preprocessor definitions
add_definitions(-DNOMINMAX)
add_definitions(-DWIN32_LEAN_AND_MEAN)

#glob sources
file(GLOB_RECURSE AI_SOURCES ${SRC_DIR}/ai/*.cpp)
file(GLOB_RECURSE ANIMATION_SOURCES ${SRC_DIR}/animation/*.cpp)
file(GLOB AUDIO_SOURCES ${SRC_DIR}/audio/*.cpp ${SRC_DIR}/audio/codec/*.cpp)
file(GLOB AUDIO_OPENAL_SOURCES ${SRC_DIR}/audio/openal/*.cpp)
file(GLOB AUDIO_DSOUND_SOURCES ${SRC_DIR}/audio/dsound/*.cpp)
file(GLOB_RECURSE CORE_SOURCES ${SRC_DIR}/core/*.cpp)
file(GLOB_RECURSE GAME_SOURCES ${SRC_DIR}/game/*.cpp)
file(GLOB_RECURSE GRAPHICS_SOURCES ${SRC_DIR}/graphics/*.cpp)
file(GLOB_RECURSE GUI_SOURCES ${SRC_DIR}/gui/*.cpp)
file(GLOB_RECURSE INPUT_SOURCES ${SRC_DIR}/input/*.cpp)
file(GLOB_RECURSE IO_SOURCES ${SRC_DIR}/io/*.cpp)
file(GLOB_RECURSE MATH_SOURCES ${SRC_DIR}/math/*.cpp)
file(GLOB_RECURSE PHYSICS_SOURCES ${SRC_DIR}/physics/*.cpp)
file(GLOB_RECURSE PLATFORM_SOURCES ${SRC_DIR}/platform/*.cpp)
file(GLOB_RECURSE SCENE_SOURCES ${SRC_DIR}/scene/*.cpp)
file(GLOB_RECURSE SCRIPT_SOURCES ${SRC_DIR}/script/*.cpp)
file(GLOB_RECURSE ALL_INCLUDES ${SRC_DIR}/*.h)

set(ALL_SOURCES ${AI_SOURCES} ${ANIMATION_SOURCES} ${AUDIO_SOURCES} ${CORE_SOURCES} ${GAME_SOURCES} ${GRAPHICS_SOURCES} ${GUI_SOURCES} ${INPUT_SOURCES} ${IO_SOURCES} ${MATH_SOURCES} ${PHYSICS_SOURCES} ${PLATFORM_SOURCES} ${SCENE_SOURCES} ${SCRIPT_SOURCES})

include_directories(${SRC_DIR} ${CMAKE_CURRENT_BINARY_DIR})
include_directories(SYSTEM ${ZLIB_INCLUDE_DIRS} ${IL_INCLUDE_DIR} ${FREETYPE_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})

if(ARX_USE_OPENAL)
	set(ALL_SOURCES ${ALL_SOURCES} ${AUDIO_OPENAL_SOURCES})
	include_directories(SYSTEM ${OPENAL_INCLUDE_DIR})
	set(HAVE_OPENAL 1)
	if(OPENALEFX_FOUND)
		include_directories(SYSTEM ${OPENAL_EFX_INCLUDE_DIR})
		set(HAVE_OPENAL_EFX 1)
	endif()
endif()
if(ARX_USE_DSOUND)
	set(ALL_SOURCES ${ALL_SOURCES} ${AUDIO_DSOUND_SOURCES})
	set(HAVE_DSOUND 1)
endif()
if(ARX_USE_OPENGL)
	include_directories(SYSTEM ${OPENGL_INCLUDE_DIR})
endif()

if(ARX_BUILD_EDITOR)
	set(BUILD_EDITOR 1)
endif()
if(ARX_BUILD_EDIT_LOADSAVE)
	set(BUILD_EDIT_LOADSAVE 1)
endif()

#enable unity build if requested
if(ARX_USE_UNITYBUILD)
	enable_unity_build(arx ALL_SOURCES)
endif()

add_definitions(-DBOOST_NO_EXCEPTIONS)
add_definitions(-DBOOST_FILESYSTEM_NO_DEPRECATED)

#create source groups
create_source_groups()

configure_file(${SRC_DIR}/Configure.h.cmake Configure.h)

#build
add_executable(arx ${ALL_SOURCES} ${ALL_INCLUDES})

#link
set(ARX_WINDOWS_LIBS gdi32 shell32 comdlg32 ole32 comctl32)
set(ARX_GRAPHICS_LIBS dxguid dinput ddraw)
target_link_libraries(arx ${ARX_GRAPHICS_LIBS} ${ARX_WINDOWS_LIBS} ${FREETYPE_LIBRARIES} ${ZLIB_LIBRARIES} ${IL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${Boost_LIBRARIES})
if(ARX_USE_OPENAL)
	target_link_libraries(arx ${OPENAL_LIBRARY})
endif()
if(TIME_LIBRARIES)
	target_link_libraries(arx ${TIME_LIBRARIES})
endif()
if(ARX_USE_OPENGL)
	target_link_libraries(arx ${OPENGL_LIBRARIES})
endif()

add_custom_target(remake
	#clean and compile with 1 thread per core
	COMMAND make clean && rm CMakeCache.txt && cmake ${CMAKE_SOURCE_DIR} -G\"Unix Makefiles\" && make -j`getconf _NPROCESSORS_ONLN`
)

if(DOXYGEN_EXECUTABLE)
	add_custom_target(doc
		#build the documentation
		COMMAND cd ${CMAKE_SOURCE_DIR} && ${DOXYGEN_EXECUTABLE} doc/Doxyfile
	)
endif()

#find python2
if(PYTHONINTERP_FOUND)
	set(STYLE_FILTER -readability/casting,-build/header_guard,-build/include,-readability/streams,-whitespace,-runtime/int)
	add_custom_target(style
		COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/cpplint.py --filter=${STYLE_FILTER} ${ALL_SOURCES} ${ALL_INCLUDES}
	)
endif()

if(ARX_BUILD_TESTS)
	add_subdirectory(tests ${CMAKE_SOURCE_DIR}/bin/tests)
endif()

if(ARX_BUILD_TOOLS)
	add_subdirectory(tools ${CMAKE_SOURCE_DIR}/bin/tools)
endif()
