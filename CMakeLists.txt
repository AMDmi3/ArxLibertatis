cmake_minimum_required(VERSION 2.8)
project(ArxFatalis)

##############################################################################
# enable_unity_build
function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)  
	set(files ${${SOURCE_VARIABLE_NAME}})

	# Sort the file list to ensure we get the same files order on all machines	
	LIST(SORT files)

	# Generate a unique filename for the unity build translation unit  
	set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)  

	# Exclude all translation units from compilation  
	set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)  

	# Open the ub file  
	FILE(WRITE ${unit_build_file} "// Unity build generated by CMake\n\n")  

	# Add include statement for each translation unit
	LIST(LENGTH files numfiles)
	SET(currentIdx 1)
	foreach(source_file ${files})  
	  STRING(REGEX REPLACE ".*\\/" "" short_file "${source_file}")
		FILE(APPEND ${unit_build_file} "#pragma message (\"[${currentIdx}/${numfiles}] Compiling ${short_file}...\")\n")
		FILE(APPEND ${unit_build_file} "#include \"${source_file}\"\n\n")  
		math(EXPR currentIdx "${currentIdx} + 1")
	endforeach(source_file)  

	# Complement list of translation units with the name of ub  
	set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE)  
endfunction(enable_unity_build) 
##############################################################################

option(ARX_BUILD_TESTS ON)
option(ARX_BUILD_TOOLS ON)
option(ARX_MINGW OFF)
option(ARX_USE_UNITYBUILD OFF)


set(SRC_DIR src)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

include_directories(${SRC_DIR})

IF (MSVC)
	# Set optimal options for msvc:
	
	# Disable deprecation warnings
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
	add_definitions(-D_SCL_SECURE_NO_WARNINGS)
	add_definitions(/wd4995)
	
	# Should be defined in debug only
	add_definitions(-D_CRTDBG_MAP_ALLOC)
	
	# TEMP - disable warning caused by the F2L removal
	add_definitions(/wd4244)    # conversion from 'float' to 'long', possible loss of data
	
	# SFML libraries
	set(SFML_LIBS sfml-system-s)	
	
	# Windows specific libs
	set(ARX_LIBS DevIL)

	# Freetype
	set(FREETYPE_LIBS freetype244MT)
  	
	# Source groups
	set(SOURCE_GROUPS
		ai animation audio core game graphics gui io physics scene scripting window
	)

	foreach(SOURCE_GROUP ${SOURCE_GROUPS})
		file(GLOB_RECURSE SOURCES ${SRC_DIR}/${SOURCE_GROUP}/*.*)
		SOURCE_GROUP("${SOURCE_GROUP}" FILES ${SOURCES})
	endforeach(SOURCE_GROUP)
	#glob includes
	file(GLOB_RECURSE ALL_INCLUDES ${SRC_DIR}/*.h)
	SOURCE_GROUP("inc" FILES ${ALL_INCLUDES})
	
ELSE (MSVC)
	# Set optimal options for gcc:
	#wine compiler
	set(CMAKE_CXX_COMPILER wineg++)
	set(CMAKE_C_COMPILER winegcc)

	#set 32bit
	set(CMAKE_CXX_FLAGS "-m32")

	#Debug
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g3")
	
	#use posix threads
	add_definitions(-DHAVE_PTHREADS)
	set(THREAD_LIBS pthread rt)
	
	#SFML libraries
	set(SFML_LIBS sfml-system)
	
	# Linux specific libs
	set(ARX_LIBS IL freetype)
  
	# Freetype...
	execute_process(COMMAND freetype-config --cflags OUTPUT_VARIABLE FREETYPE_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE)
	execute_process(COMMAND freetype-config --libs OUTPUT_VARIABLE FREETYPE_LIBS OUTPUT_STRIP_TRAILING_WHITESPACE)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FREETYPE_CXX_FLAGS}")

ENDIF (MSVC)

if(ARX_MINGW)
	set(CMAKE_CXX_COMPILER i486-mingw32-g++)
	set(CMAKE_C_COMPILER i486-mingw32-gcc)
endif()

# Preprocessor definitions
add_definitions(-D_DEBUG)
add_definitions(-DNOMINMAX)

#glob sources
file(GLOB_RECURSE ALL_SOURCES ${SRC_DIR}/*.cpp)

#enable unity build if requested
if(ARX_USE_UNITYBUILD)
  enable_unity_build(arx ALL_SOURCES)
ENDIF()

#build
add_executable(arx ${ALL_SOURCES} ${ALL_INCLUDES})

#link
target_link_libraries(arx dsound dxguid gdi32 shell32 dinput comdlg32 ole32 comctl32 ddraw z ${ARX_LIBS} ${SFML_LIBS} ${THREAD_LIBS} ${FREETYPE_LIBS})

add_custom_target(remake
	#clean and compile with 1 thread per core
	COMMAND make clean && rm CMakeCache.txt && cmake ${CMAKE_SOURCE_DIR} -G\"Unix Makefiles\" && make -j`getconf _NPROCESSORS_ONLN`
)

add_custom_target(doc
	#build the documentation
	COMMAND cd ${CMAKE_SOURCE_DIR} && doxygen doc/Doxyfile
)

#find python2
IF(EXISTS "/usr/bin/python2")
	SET(PYTHON_BIN "python2")
ELSE()
	SET(PYTHON_BIN "python")
ENDIF()
SET(STYLE_FILTER -readability/casting,-build/header_guard,-build/include,-readability/streams,-whitespace,-runtime/int)
add_custom_target(style
	COMMAND ${PYTHON_BIN} ${CMAKE_SOURCE_DIR}/scripts/cpplint.py --filter=${STYLE_FILTER} ${ALL_SOURCES} ${ALL_INCLUDES}
)

if(ARX_BUILD_TESTS)
	add_subdirectory(tests ${CMAKE_SOURCE_DIR}/bin/tests)
endif()

if(ARX_BUILD_TOOLS)
	add_subdirectory(tools ${CMAKE_SOURCE_DIR}/bin/tools)
endif()
