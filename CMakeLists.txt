cmake_minimum_required(VERSION 2.8)
project(ArxFatalis)

##############################################################################
# enable_unity_build
function(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)  
	set(files ${${SOURCE_VARIABLE_NAME}})
	
	# Sort the file list to ensure we get the same files order on all machines
	list(SORT files)
	
	# Generate a unique filename for the unity build translation unit  
	set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)  
	
	# Exclude all translation units from compilation  
	set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)  
	
	# Open the ub file  
	file(WRITE ${unit_build_file} "// Unity build generated by CMake\n\n")  
	
	# Add include statement for each translation unit
	list(LENGTH files numfiles)
	set(currentIdx 1)
	foreach(source_file ${files})  
		string(REGEX REPLACE ".*\\/" "" short_file "${source_file}")
		file(APPEND ${unit_build_file} "#pragma message (\"[${currentIdx}/${numfiles}] Compiling ${short_file}...\")\n")
		file(APPEND ${unit_build_file} "#include \"${source_file}\"\n\n")  
		math(EXPR currentIdx "${currentIdx} + 1")
	endforeach(source_file)  
	
	# Complement list of translation units with the name of ub  
	set(${SOURCE_VARIABLE_NAME} ${${SOURCE_VARIABLE_NAME}} ${unit_build_file} PARENT_SCOPE)  
endfunction(enable_unity_build) 

##############################################################################
# Check that a a library actually works for the current configuration.
function(check_link_library LIBRARY_NAME LIBRARY_FILE)
	if(NOT CHECK_${LIBRARY_NAME}_LINK)
		message(STATUS "Checking ${LIBRARY_NAME}: ${LIBRARY_FILE} ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_FLAGS}")
		
		# See if we can link a simple 32-bit program with the library.
		set(link_test_file ${CMAKE_CURRENT_BINARY_DIR}/link_test.cpp)
		file(WRITE ${link_test_file} "int main(){}\n")
		try_compile(CHECK_${LIBRARY_NAME}_LINK ${CMAKE_BINARY_DIR} ${link_test_file} CMAKE_FLAGS "-DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}" "-DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}" "-DLINK_LIBRARIES:STRING=${LIBRARY_FILE}")
		
		if(NOT CHECK_${LIBRARY_NAME}_LINK)
			# Force cmake to search again, as the cached library doesn't work.
			unset(FIND_PACKAGE_MESSAGE_DETAILS_${ARGV2} CACHE)
			unset(FIND_PACKAGE_MESSAGE_DETAILS_${LIBRARY_NAME} CACHE)
			message(FATAL_ERROR "No suitable (32-bit) version of ${LIBRARY_NAME} found; tried ${LIBRARY_FILE}")
		endif()
	endif()
endfunction(check_link_library)

##############################################################################

option(ARX_BUILD_TESTS "Build tests" OFF)
option(ARX_BUILD_TOOLS "Build tools" ON)
option(ARX_MINGW "Build on MinGW" OFF)
option(ARX_USE_UNITYBUILD "Unity build" OFF)
option(ARX_DEBUG "Normal debug options" ON)
option(ARX_DEBUG_EXTRA "Expensive debug options" OFF)

# For custom cmake modules.
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/")

find_package(DevIL REQUIRED)
find_package(ZLIB REQUIRED)
find_package(Threads REQUIRED)
find_package(Doxygen)
find_package(PythonInterp)

mark_as_advanced(IL_INCLUDE_DIR)
mark_as_advanced(ILUT_LIBRARIES)
mark_as_advanced(ILU_LIBRARIES)
mark_as_advanced(IL_LIBRARIES)

set(SRC_DIR src)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)

include_directories(${SRC_DIR} ${ZLIB_INCLUDE_DIRS} ${IL_INCLUDE_DIR})

if(MSVC)
	# Set optimal options for msvc:
	
	# Disable deprecation warnings
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
	add_definitions(-D_SCL_SECURE_NO_WARNINGS)
	add_definitions(/wd4995)
	
	if(ARX_DEBUG)
		add_definitions(-D_CRTDBG_MAP_ALLOC)
	endif()
	
	# TEMP - disable warning caused by the F2L removal
	add_definitions(/wd4244)    # conversion from 'float' to 'long', possible loss of data
	
	# Source groups
	set(SOURCE_GROUPS
		ai animation audio core game graphics gui io physics scene scripting window
	)
	
	foreach(SOURCE_GROUP ${SOURCE_GROUPS})
		file(GLOB_RECURSE SOURCES ${SRC_DIR}/${SOURCE_GROUP}/*.*)
		source_group("${SOURCE_GROUP}" FILES ${SOURCES})
	endforeach(SOURCE_GROUP)
	#glob includes
	file(GLOB_RECURSE ALL_INCLUDES ${SRC_DIR}/*.h)
	source_group("inc" FILES ${ALL_INCLUDES})
	
else(MSVC)
	# Set optimal options for gcc:
	
	find_package(Wine REQUIRED)
	
	#wine compiler
	set(CMAKE_CXX_COMPILER ${Wine_GXX})
	set(CMAKE_C_COMPILER ${Wine_GCC})
	
	#set 32bit
        #set(CMAKE_CXX_FLAGS "-m32")
	
	# Check the dependencies so there won't by cryptic link errors later on when 32-bit libraries are missing.
	check_link_library(DevIL ${IL_LIBRARIES} IL)
	check_link_library(ZLIB ${ZLIB_LIBRARIES})
	check_link_library(Threads ${CMAKE_THREAD_LIBS_INIT})
	
	# Warning level
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wformat=2 -Wundef -Wpointer-arith -Wlogical-op -Wcast-qual")
	
	# Consider also: -Wconversion -Wsign-conversion
	#                -Wmissing-declarations     to catch functions that should be marked as static
	#                -Wredundant-decls          to catch extern definitions in .cpp files (with UNITYBUILD)
	#                -Wsuggest-attribute=const  to add missing const qualifiers (only in gcc 4.6)
	
	if(ARX_DEBUG)
		#Debug
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g3")
	else()
		#Release
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -fno-strict-aliasing -g3") # TODO enable optimizations
	endif()
	
	if(ARX_DEBUG_EXTRA)
		add_definitions(-D_GLIBCXX_DEBUG) # Runtime checks for STL containers.
	endif()
	
	if(NOT ARX_DEBUG_EXTRA)
		# -Wuninitialized causes too many false positives
		# TODO Disable for now untill we find a way to suppress individual warnings.
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-uninitialized")
	endif()
	
	if(ARX_USE_UNITYBUILD)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fwhole-program")
	endif()
	
endif(MSVC)

#use posix threads
set(ARX_THREAD_LIBS "${CMAKE_THREAD_LIBS_INIT}")
if(CMAKE_USE_PTHREADS_INIT)
	add_definitions(-DHAVE_PTHREADS)
	set(ARX_THREAD_LIBS "${ARX_THREAD_LIBS} -lrt")
elseif(NOT CMAKE_USE_WIN32_THREADS_INIT)
	message(SEND_ERROR "No supported thread libraries found.")
endif()

if(ARX_MINGW)
	set(CMAKE_CXX_COMPILER i486-mingw32-g++)
	set(CMAKE_C_COMPILER i486-mingw32-gcc)
endif(ARX_MINGW)

# Preprocessor definitions
add_definitions(-D_DEBUG)
add_definitions(-DNOMINMAX)

#glob sources
file(GLOB_RECURSE ALL_SOURCES ${SRC_DIR}/*.cpp)

#enable unity build if requested
if(ARX_USE_UNITYBUILD)
	enable_unity_build(arx ALL_SOURCES)
endif()

#build
add_executable(arx ${ALL_SOURCES} ${ALL_INCLUDES})

#link
set(ARX_WINDOWS_LIBS gdi32 shell32 comdlg32 ole32 comctl32)
set(ARX_GRAPHICS_LIBS dxguid dinput ddraw)
set(ARX_SOUND_LIBS dsound)
target_link_libraries(arx ${ARX_SOUND_LIBS} ${ARX_GRAPHICS_LIBS} ${ARX_WINDOWS_LIBS} ${ZLIB_LIBRARIES} ${IL_LIBRARIES} ${ARX_THREAD_LIBS})

add_custom_target(remake
	#clean and compile with 1 thread per core
	COMMAND make clean && rm CMakeCache.txt && cmake ${CMAKE_SOURCE_DIR} -G\"Unix Makefiles\" && make -j`getconf _NPROCESSORS_ONLN`
)

if(DOXYGEN_EXECUTABLE)
	add_custom_target(doc
		#build the documentation
		COMMAND cd ${CMAKE_SOURCE_DIR} && ${DOXYGEN_EXECUTABLE} doc/Doxyfile
	)
endif()

#find python2
if(PYTHONINTERP_FOUND)
	set(STYLE_FILTER -readability/casting,-build/header_guard,-build/include,-readability/streams,-whitespace,-runtime/int)
	add_custom_target(style
		COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/cpplint.py --filter=${STYLE_FILTER} ${ALL_SOURCES} ${ALL_INCLUDES}
	)
endif()

if(ARX_BUILD_TESTS)
	add_subdirectory(tests ${CMAKE_SOURCE_DIR}/bin/tests)
endif()

if(ARX_BUILD_TOOLS)
	add_subdirectory(tools ${CMAKE_SOURCE_DIR}/bin/tools)
endif()
